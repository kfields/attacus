#include <pybind11/pybind11.h>
#include <pybind11/functional.h>
#include <pybind11/stl.h>
#include <limits>

#include <attacus/flutter/embedder.h>

#include "bindtools.h"
#include "conversions.h"

namespace py = pybind11;

void init_generated(py::module &attacus_py, Registry &registry) {
    py::enum_<FlutterEngineResult>(attacus_py, "EngineResult", py::arithmetic())
        .value("K_SUCCESS", kSuccess)
        .value("K_INVALID_LIBRARY_VERSION", kInvalidLibraryVersion)
        .value("K_INVALID_ARGUMENTS", kInvalidArguments)
        .value("K_INTERNAL_INCONSISTENCY", kInternalInconsistency)
        .export_values();

    py::enum_<FlutterRendererType>(attacus_py, "RendererType", py::arithmetic())
        .value("K_OPEN_GL", kOpenGL)
        .value("K_SOFTWARE", kSoftware)
        .value("K_METAL", kMetal)
        .export_values();

    py::enum_<FlutterAccessibilityFeature>(attacus_py, "AccessibilityFeature", py::arithmetic())
        .value("K_ACCESSIBILITY_FEATURE_ACCESSIBLE_NAVIGATION", kFlutterAccessibilityFeatureAccessibleNavigation)
        .value("K_ACCESSIBILITY_FEATURE_INVERT_COLORS", kFlutterAccessibilityFeatureInvertColors)
        .value("K_ACCESSIBILITY_FEATURE_DISABLE_ANIMATIONS", kFlutterAccessibilityFeatureDisableAnimations)
        .value("K_ACCESSIBILITY_FEATURE_BOLD_TEXT", kFlutterAccessibilityFeatureBoldText)
        .value("K_ACCESSIBILITY_FEATURE_REDUCE_MOTION", kFlutterAccessibilityFeatureReduceMotion)
        .export_values();

    py::enum_<FlutterSemanticsAction>(attacus_py, "SemanticsAction", py::arithmetic())
        .value("K_SEMANTICS_ACTION_TAP", kFlutterSemanticsActionTap)
        .value("K_SEMANTICS_ACTION_LONG_PRESS", kFlutterSemanticsActionLongPress)
        .value("K_SEMANTICS_ACTION_SCROLL_LEFT", kFlutterSemanticsActionScrollLeft)
        .value("K_SEMANTICS_ACTION_SCROLL_RIGHT", kFlutterSemanticsActionScrollRight)
        .value("K_SEMANTICS_ACTION_SCROLL_UP", kFlutterSemanticsActionScrollUp)
        .value("K_SEMANTICS_ACTION_SCROLL_DOWN", kFlutterSemanticsActionScrollDown)
        .value("K_SEMANTICS_ACTION_INCREASE", kFlutterSemanticsActionIncrease)
        .value("K_SEMANTICS_ACTION_DECREASE", kFlutterSemanticsActionDecrease)
        .value("K_SEMANTICS_ACTION_SHOW_ON_SCREEN", kFlutterSemanticsActionShowOnScreen)
        .value("K_SEMANTICS_ACTION_MOVE_CURSOR_FORWARD_BY_CHARACTER", kFlutterSemanticsActionMoveCursorForwardByCharacter)
        .value("K_SEMANTICS_ACTION_MOVE_CURSOR_BACKWARD_BY_CHARACTER", kFlutterSemanticsActionMoveCursorBackwardByCharacter)
        .value("K_SEMANTICS_ACTION_SET_SELECTION", kFlutterSemanticsActionSetSelection)
        .value("K_SEMANTICS_ACTION_COPY", kFlutterSemanticsActionCopy)
        .value("K_SEMANTICS_ACTION_CUT", kFlutterSemanticsActionCut)
        .value("K_SEMANTICS_ACTION_PASTE", kFlutterSemanticsActionPaste)
        .value("K_SEMANTICS_ACTION_DID_GAIN_ACCESSIBILITY_FOCUS", kFlutterSemanticsActionDidGainAccessibilityFocus)
        .value("K_SEMANTICS_ACTION_DID_LOSE_ACCESSIBILITY_FOCUS", kFlutterSemanticsActionDidLoseAccessibilityFocus)
        .value("K_SEMANTICS_ACTION_CUSTOM_ACTION", kFlutterSemanticsActionCustomAction)
        .value("K_SEMANTICS_ACTION_DISMISS", kFlutterSemanticsActionDismiss)
        .value("K_SEMANTICS_ACTION_MOVE_CURSOR_FORWARD_BY_WORD", kFlutterSemanticsActionMoveCursorForwardByWord)
        .value("K_SEMANTICS_ACTION_MOVE_CURSOR_BACKWARD_BY_WORD", kFlutterSemanticsActionMoveCursorBackwardByWord)
        .export_values();

    py::enum_<FlutterSemanticsFlag>(attacus_py, "SemanticsFlag", py::arithmetic())
        .value("K_SEMANTICS_FLAG_HAS_CHECKED_STATE", kFlutterSemanticsFlagHasCheckedState)
        .value("K_SEMANTICS_FLAG_IS_CHECKED", kFlutterSemanticsFlagIsChecked)
        .value("K_SEMANTICS_FLAG_IS_SELECTED", kFlutterSemanticsFlagIsSelected)
        .value("K_SEMANTICS_FLAG_IS_BUTTON", kFlutterSemanticsFlagIsButton)
        .value("K_SEMANTICS_FLAG_IS_TEXT_FIELD", kFlutterSemanticsFlagIsTextField)
        .value("K_SEMANTICS_FLAG_IS_FOCUSED", kFlutterSemanticsFlagIsFocused)
        .value("K_SEMANTICS_FLAG_HAS_ENABLED_STATE", kFlutterSemanticsFlagHasEnabledState)
        .value("K_SEMANTICS_FLAG_IS_ENABLED", kFlutterSemanticsFlagIsEnabled)
        .value("K_SEMANTICS_FLAG_IS_IN_MUTUALLY_EXCLUSIVE_GROUP", kFlutterSemanticsFlagIsInMutuallyExclusiveGroup)
        .value("K_SEMANTICS_FLAG_IS_HEADER", kFlutterSemanticsFlagIsHeader)
        .value("K_SEMANTICS_FLAG_IS_OBSCURED", kFlutterSemanticsFlagIsObscured)
        .value("K_SEMANTICS_FLAG_SCOPES_ROUTE", kFlutterSemanticsFlagScopesRoute)
        .value("K_SEMANTICS_FLAG_NAMES_ROUTE", kFlutterSemanticsFlagNamesRoute)
        .value("K_SEMANTICS_FLAG_IS_HIDDEN", kFlutterSemanticsFlagIsHidden)
        .value("K_SEMANTICS_FLAG_ISAGE", kFlutterSemanticsFlagIsImage)
        .value("K_SEMANTICS_FLAG_IS_LIVE_REGION", kFlutterSemanticsFlagIsLiveRegion)
        .value("K_SEMANTICS_FLAG_HAS_TOGGLED_STATE", kFlutterSemanticsFlagHasToggledState)
        .value("K_SEMANTICS_FLAG_IS_TOGGLED", kFlutterSemanticsFlagIsToggled)
        .value("K_SEMANTICS_FLAG_HASPLICIT_SCROLLING", kFlutterSemanticsFlagHasImplicitScrolling)
        .value("K_SEMANTICS_FLAG_IS_READ_ONLY", kFlutterSemanticsFlagIsReadOnly)
        .value("K_SEMANTICS_FLAG_IS_FOCUSABLE", kFlutterSemanticsFlagIsFocusable)
        .value("K_SEMANTICS_FLAG_IS_LINK", kFlutterSemanticsFlagIsLink)
        .value("K_SEMANTICS_FLAG_IS_SLIDER", kFlutterSemanticsFlagIsSlider)
        .value("K_SEMANTICS_FLAG_IS_KEYBOARD_KEY", kFlutterSemanticsFlagIsKeyboardKey)
        .export_values();

    py::enum_<FlutterTextDirection>(attacus_py, "TextDirection", py::arithmetic())
        .value("K_TEXT_DIRECTION_UNKNOWN", kFlutterTextDirectionUnknown)
        .value("K_TEXT_DIRECTION_RTL", kFlutterTextDirectionRTL)
        .value("K_TEXT_DIRECTION_LTR", kFlutterTextDirectionLTR)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterTransformation, Transformation)
        .def(py::init<>([](){ return FlutterTransformation(); }))
        .def_readwrite("scale_x", &FlutterTransformation::scaleX)
        .def_readwrite("skew_x", &FlutterTransformation::skewX)
        .def_readwrite("trans_x", &FlutterTransformation::transX)
        .def_readwrite("skew_y", &FlutterTransformation::skewY)
        .def_readwrite("scale_y", &FlutterTransformation::scaleY)
        .def_readwrite("trans_y", &FlutterTransformation::transY)
        .def_readwrite("pers0", &FlutterTransformation::pers0)
        .def_readwrite("pers1", &FlutterTransformation::pers1)
        .def_readwrite("pers2", &FlutterTransformation::pers2)
    PYCLASS_END(attacus_py, FlutterTransformation, Transformation)

    py::enum_<FlutterOpenGLTargetType>(attacus_py, "OpenGLTargetType", py::arithmetic())
        .value("K_OPEN_GL_TARGET_TYPE_TEXTURE", kFlutterOpenGLTargetTypeTexture)
        .value("K_OPEN_GL_TARGET_TYPE_FRAMEBUFFER", kFlutterOpenGLTargetTypeFramebuffer)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterOpenGLTexture, OpenGLTexture)
        .def(py::init<>([](){ return FlutterOpenGLTexture(); }))
        .def_readwrite("target", &FlutterOpenGLTexture::target)
        .def_readwrite("name", &FlutterOpenGLTexture::name)
        .def_readwrite("format", &FlutterOpenGLTexture::format)
        .def_readwrite("user_data", &FlutterOpenGLTexture::user_data)
        .def_readwrite("destruction_callback", &FlutterOpenGLTexture::destruction_callback)
        .def_readwrite("width", &FlutterOpenGLTexture::width)
        .def_readwrite("height", &FlutterOpenGLTexture::height)
    PYCLASS_END(attacus_py, FlutterOpenGLTexture, OpenGLTexture)

    PYCLASS_BEGIN(attacus_py, FlutterOpenGLFramebuffer, OpenGLFramebuffer)
        .def(py::init<>([](){ return FlutterOpenGLFramebuffer(); }))
        .def_readwrite("target", &FlutterOpenGLFramebuffer::target)
        .def_readwrite("name", &FlutterOpenGLFramebuffer::name)
        .def_readwrite("user_data", &FlutterOpenGLFramebuffer::user_data)
        .def_readwrite("destruction_callback", &FlutterOpenGLFramebuffer::destruction_callback)
    PYCLASS_END(attacus_py, FlutterOpenGLFramebuffer, OpenGLFramebuffer)

    PYCLASS_BEGIN(attacus_py, FlutterUIntSize, UIntSize)
        .def(py::init<>([](){ return FlutterUIntSize(); }))
        .def_readwrite("width", &FlutterUIntSize::width)
        .def_readwrite("height", &FlutterUIntSize::height)
    PYCLASS_END(attacus_py, FlutterUIntSize, UIntSize)

    PYCLASS_BEGIN(attacus_py, FlutterRect, Rect)
        .def(py::init<>([](){ return FlutterRect(); }))
        .def_readwrite("left", &FlutterRect::left)
        .def_readwrite("top", &FlutterRect::top)
        .def_readwrite("right", &FlutterRect::right)
        .def_readwrite("bottom", &FlutterRect::bottom)
    PYCLASS_END(attacus_py, FlutterRect, Rect)

    PYCLASS_BEGIN(attacus_py, FlutterPoint, Point)
        .def(py::init<>([](){ return FlutterPoint(); }))
        .def_readwrite("x", &FlutterPoint::x)
        .def_readwrite("y", &FlutterPoint::y)
    PYCLASS_END(attacus_py, FlutterPoint, Point)

    PYCLASS_BEGIN(attacus_py, FlutterRoundedRect, RoundedRect)
        .def(py::init<>([](){ return FlutterRoundedRect(); }))
        .def_readwrite("rect", &FlutterRoundedRect::rect)
        .def_readwrite("upper_left_corner_radius", &FlutterRoundedRect::upper_left_corner_radius)
        .def_readwrite("upper_right_corner_radius", &FlutterRoundedRect::upper_right_corner_radius)
        .def_readwrite("lower_right_corner_radius", &FlutterRoundedRect::lower_right_corner_radius)
        .def_readwrite("lower_left_corner_radius", &FlutterRoundedRect::lower_left_corner_radius)
    PYCLASS_END(attacus_py, FlutterRoundedRect, RoundedRect)

    PYCLASS_BEGIN(attacus_py, FlutterFrameInfo, FrameInfo)
        .def(py::init<>([](){ return FlutterFrameInfo(); }))
        .def_readwrite("struct_size", &FlutterFrameInfo::struct_size)
        .def_readwrite("size", &FlutterFrameInfo::size)
    PYCLASS_END(attacus_py, FlutterFrameInfo, FrameInfo)

    PYCLASS_BEGIN(attacus_py, FlutterPresentInfo, PresentInfo)
        .def(py::init<>([](){ return FlutterPresentInfo(); }))
        .def_readwrite("struct_size", &FlutterPresentInfo::struct_size)
        .def_readwrite("fbo_id", &FlutterPresentInfo::fbo_id)
    PYCLASS_END(attacus_py, FlutterPresentInfo, PresentInfo)

    PYCLASS_BEGIN(attacus_py, FlutterOpenGLRendererConfig, OpenGLRendererConfig)
        .def(py::init<>([](){ return FlutterOpenGLRendererConfig(); }))
        .def_readwrite("struct_size", &FlutterOpenGLRendererConfig::struct_size)
        .def_readwrite("make_current", &FlutterOpenGLRendererConfig::make_current)
        .def_readwrite("clear_current", &FlutterOpenGLRendererConfig::clear_current)
        .def_readwrite("present", &FlutterOpenGLRendererConfig::present)
        .def_readwrite("fbo_callback", &FlutterOpenGLRendererConfig::fbo_callback)
        .def_readwrite("make_resource_current", &FlutterOpenGLRendererConfig::make_resource_current)
        .def_readwrite("fbo_reset_after_present", &FlutterOpenGLRendererConfig::fbo_reset_after_present)
        .def_readwrite("surface_transformation", &FlutterOpenGLRendererConfig::surface_transformation)
        .def_readwrite("gl_proc_resolver", &FlutterOpenGLRendererConfig::gl_proc_resolver)
        .def_readwrite("gl_external_texture_frame_callback", &FlutterOpenGLRendererConfig::gl_external_texture_frame_callback)
        .def_readwrite("fbo_with_frame_info_callback", &FlutterOpenGLRendererConfig::fbo_with_frame_info_callback)
        .def_readwrite("present_with_info", &FlutterOpenGLRendererConfig::present_with_info)
    PYCLASS_END(attacus_py, FlutterOpenGLRendererConfig, OpenGLRendererConfig)

    py::enum_<FlutterMetalExternalTexturePixelFormat>(attacus_py, "MetalExternalTexturePixelFormat", py::arithmetic())
        .value("K_YUVA", kYUVA)
        .value("K_RGBA", kRGBA)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterMetalTexture, MetalTexture)
        .def(py::init<>([](){ return FlutterMetalTexture(); }))
        .def_readwrite("struct_size", &FlutterMetalTexture::struct_size)
        .def_readwrite("texture_id", &FlutterMetalTexture::texture_id)
        .def_readwrite("texture", &FlutterMetalTexture::texture)
        .def_readwrite("user_data", &FlutterMetalTexture::user_data)
        .def_readwrite("destruction_callback", &FlutterMetalTexture::destruction_callback)
    PYCLASS_END(attacus_py, FlutterMetalTexture, MetalTexture)

    PYCLASS_BEGIN(attacus_py, FlutterMetalRendererConfig, MetalRendererConfig)
        .def(py::init<>([](){ return FlutterMetalRendererConfig(); }))
        .def_readwrite("struct_size", &FlutterMetalRendererConfig::struct_size)
        .def_readwrite("device", &FlutterMetalRendererConfig::device)
        .def_readwrite("present_command_queue", &FlutterMetalRendererConfig::present_command_queue)
        .def_readwrite("get_next_drawable_callback", &FlutterMetalRendererConfig::get_next_drawable_callback)
        .def_readwrite("present_drawable_callback", &FlutterMetalRendererConfig::present_drawable_callback)
        .def_readwrite("external_texture_frame_callback", &FlutterMetalRendererConfig::external_texture_frame_callback)
    PYCLASS_END(attacus_py, FlutterMetalRendererConfig, MetalRendererConfig)

    PYCLASS_BEGIN(attacus_py, FlutterSoftwareRendererConfig, SoftwareRendererConfig)
        .def(py::init<>([](){ return FlutterSoftwareRendererConfig(); }))
        .def_readwrite("struct_size", &FlutterSoftwareRendererConfig::struct_size)
        .def_readwrite("surface_present_callback", &FlutterSoftwareRendererConfig::surface_present_callback)
    PYCLASS_END(attacus_py, FlutterSoftwareRendererConfig, SoftwareRendererConfig)

    PYCLASS_BEGIN(attacus_py, FlutterRendererConfig, RendererConfig)
        .def(py::init<>([](){ return FlutterRendererConfig(); }))
        .def_readwrite("type", &FlutterRendererConfig::type)
    PYCLASS_END(attacus_py, FlutterRendererConfig, RendererConfig)

    PYCLASS_BEGIN(attacus_py, FlutterWindowMetricsEvent, WindowMetricsEvent)
        .def(py::init<>([](){ return FlutterWindowMetricsEvent(); }))
        .def_readwrite("struct_size", &FlutterWindowMetricsEvent::struct_size)
        .def_readwrite("width", &FlutterWindowMetricsEvent::width)
        .def_readwrite("height", &FlutterWindowMetricsEvent::height)
        .def_readwrite("pixel_ratio", &FlutterWindowMetricsEvent::pixel_ratio)
        .def_readwrite("left", &FlutterWindowMetricsEvent::left)
        .def_readwrite("top", &FlutterWindowMetricsEvent::top)
        .def_readwrite("physical_view_inset_top", &FlutterWindowMetricsEvent::physical_view_inset_top)
        .def_readwrite("physical_view_inset_right", &FlutterWindowMetricsEvent::physical_view_inset_right)
        .def_readwrite("physical_view_inset_bottom", &FlutterWindowMetricsEvent::physical_view_inset_bottom)
        .def_readwrite("physical_view_inset_left", &FlutterWindowMetricsEvent::physical_view_inset_left)
    PYCLASS_END(attacus_py, FlutterWindowMetricsEvent, WindowMetricsEvent)

    py::enum_<FlutterPointerPhase>(attacus_py, "PointerPhase", py::arithmetic())
        .value("K_CANCEL", kCancel)
        .value("K_UP", kUp)
        .value("K_DOWN", kDown)
        .value("K_MOVE", kMove)
        .value("K_ADD", kAdd)
        .value("K_REMOVE", kRemove)
        .value("K_HOVER", kHover)
        .export_values();

    py::enum_<FlutterPointerDeviceKind>(attacus_py, "PointerDeviceKind", py::arithmetic())
        .value("K_POINTER_DEVICE_KIND_MOUSE", kFlutterPointerDeviceKindMouse)
        .value("K_POINTER_DEVICE_KIND_TOUCH", kFlutterPointerDeviceKindTouch)
        .value("K_POINTER_DEVICE_KIND_STYLUS", kFlutterPointerDeviceKindStylus)
        .export_values();

    py::enum_<FlutterPointerMouseButtons>(attacus_py, "PointerMouseButtons", py::arithmetic())
        .value("K_POINTER_BUTTON_MOUSE_PRIMARY", kFlutterPointerButtonMousePrimary)
        .value("K_POINTER_BUTTON_MOUSE_SECONDARY", kFlutterPointerButtonMouseSecondary)
        .value("K_POINTER_BUTTON_MOUSE_MIDDLE", kFlutterPointerButtonMouseMiddle)
        .value("K_POINTER_BUTTON_MOUSE_BACK", kFlutterPointerButtonMouseBack)
        .value("K_POINTER_BUTTON_MOUSE_FORWARD", kFlutterPointerButtonMouseForward)
        .export_values();

    py::enum_<FlutterPointerSignalKind>(attacus_py, "PointerSignalKind", py::arithmetic())
        .value("K_POINTER_SIGNAL_KIND_NONE", kFlutterPointerSignalKindNone)
        .value("K_POINTER_SIGNAL_KIND_SCROLL", kFlutterPointerSignalKindScroll)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterPointerEvent, PointerEvent)
        .def(py::init<>([](){ return FlutterPointerEvent(); }))
        .def_readwrite("struct_size", &FlutterPointerEvent::struct_size)
        .def_readwrite("phase", &FlutterPointerEvent::phase)
        .def_readwrite("timestamp", &FlutterPointerEvent::timestamp)
        .def_readwrite("x", &FlutterPointerEvent::x)
        .def_readwrite("y", &FlutterPointerEvent::y)
        .def_readwrite("device", &FlutterPointerEvent::device)
        .def_readwrite("signal_kind", &FlutterPointerEvent::signal_kind)
        .def_readwrite("scroll_delta_x", &FlutterPointerEvent::scroll_delta_x)
        .def_readwrite("scroll_delta_y", &FlutterPointerEvent::scroll_delta_y)
        .def_readwrite("device_kind", &FlutterPointerEvent::device_kind)
        .def_readwrite("buttons", &FlutterPointerEvent::buttons)
    PYCLASS_END(attacus_py, FlutterPointerEvent, PointerEvent)

    py::enum_<FlutterKeyEventType>(attacus_py, "KeyEventType", py::arithmetic())
        .value("K_KEY_EVENT_TYPE_UP", kFlutterKeyEventTypeUp)
        .value("K_KEY_EVENT_TYPE_DOWN", kFlutterKeyEventTypeDown)
        .value("K_KEY_EVENT_TYPE_REPEAT", kFlutterKeyEventTypeRepeat)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterKeyEvent, KeyEvent)
        .def(py::init<>([](){ return FlutterKeyEvent(); }))
        .def_readwrite("struct_size", &FlutterKeyEvent::struct_size)
        .def_readwrite("timestamp", &FlutterKeyEvent::timestamp)
        .def_readwrite("type", &FlutterKeyEvent::type)
        .def_readwrite("physical", &FlutterKeyEvent::physical)
        .def_readwrite("logical", &FlutterKeyEvent::logical)
        .def_readwrite("character", &FlutterKeyEvent::character)
        .def_readwrite("synthesized", &FlutterKeyEvent::synthesized)
    PYCLASS_END(attacus_py, FlutterKeyEvent, KeyEvent)

    PYCLASS_BEGIN(attacus_py, FlutterSemanticsNode, SemanticsNode)
        .def(py::init<>([](){ return FlutterSemanticsNode(); }))
        .def_readwrite("struct_size", &FlutterSemanticsNode::struct_size)
        .def_readwrite("id", &FlutterSemanticsNode::id)
        .def_readwrite("flags", &FlutterSemanticsNode::flags)
        .def_readwrite("actions", &FlutterSemanticsNode::actions)
        .def_readwrite("text_selection_base", &FlutterSemanticsNode::text_selection_base)
        .def_readwrite("text_selection_extent", &FlutterSemanticsNode::text_selection_extent)
        .def_readwrite("scroll_child_count", &FlutterSemanticsNode::scroll_child_count)
        .def_readwrite("scroll_index", &FlutterSemanticsNode::scroll_index)
        .def_readwrite("scroll_position", &FlutterSemanticsNode::scroll_position)
        .def_readwrite("scroll_extent_max", &FlutterSemanticsNode::scroll_extent_max)
        .def_readwrite("scroll_extent_min", &FlutterSemanticsNode::scroll_extent_min)
        .def_readwrite("elevation", &FlutterSemanticsNode::elevation)
        .def_readwrite("thickness", &FlutterSemanticsNode::thickness)
        .def_readwrite("label", &FlutterSemanticsNode::label)
        .def_readwrite("hint", &FlutterSemanticsNode::hint)
        .def_readwrite("value", &FlutterSemanticsNode::value)
        .def_readwrite("increased_value", &FlutterSemanticsNode::increased_value)
        .def_readwrite("decreased_value", &FlutterSemanticsNode::decreased_value)
        .def_readwrite("text_direction", &FlutterSemanticsNode::text_direction)
        .def_readwrite("rect", &FlutterSemanticsNode::rect)
        .def_readwrite("transform", &FlutterSemanticsNode::transform)
        .def_readwrite("child_count", &FlutterSemanticsNode::child_count)
        .def_readwrite("children_in_traversal_order", &FlutterSemanticsNode::children_in_traversal_order)
        .def_readwrite("children_in_hit_test_order", &FlutterSemanticsNode::children_in_hit_test_order)
        .def_readwrite("custom_accessibility_actions_count", &FlutterSemanticsNode::custom_accessibility_actions_count)
        .def_readwrite("custom_accessibility_actions", &FlutterSemanticsNode::custom_accessibility_actions)
        .def_readwrite("platform_view_id", &FlutterSemanticsNode::platform_view_id)
    PYCLASS_END(attacus_py, FlutterSemanticsNode, SemanticsNode)

    PYCLASS_BEGIN(attacus_py, FlutterSemanticsCustomAction, SemanticsCustomAction)
        .def(py::init<>([](){ return FlutterSemanticsCustomAction(); }))
        .def_readwrite("struct_size", &FlutterSemanticsCustomAction::struct_size)
        .def_readwrite("id", &FlutterSemanticsCustomAction::id)
        .def_readwrite("override_action", &FlutterSemanticsCustomAction::override_action)
        .def_readwrite("label", &FlutterSemanticsCustomAction::label)
        .def_readwrite("hint", &FlutterSemanticsCustomAction::hint)
    PYCLASS_END(attacus_py, FlutterSemanticsCustomAction, SemanticsCustomAction)

    PYCLASS_BEGIN(attacus_py, FlutterTaskRunnerDescription, TaskRunnerDescription)
        .def(py::init<>([](){ return FlutterTaskRunnerDescription(); }))
        .def_readwrite("struct_size", &FlutterTaskRunnerDescription::struct_size)
        .def_readwrite("user_data", &FlutterTaskRunnerDescription::user_data)
        .def_readwrite("runs_task_on_current_thread_callback", &FlutterTaskRunnerDescription::runs_task_on_current_thread_callback)
        .def_readwrite("post_task_callback", &FlutterTaskRunnerDescription::post_task_callback)
        .def_readwrite("identifier", &FlutterTaskRunnerDescription::identifier)
    PYCLASS_END(attacus_py, FlutterTaskRunnerDescription, TaskRunnerDescription)

    PYCLASS_BEGIN(attacus_py, FlutterCustomTaskRunners, CustomTaskRunners)
        .def(py::init<>([](){ return FlutterCustomTaskRunners(); }))
        .def_readwrite("struct_size", &FlutterCustomTaskRunners::struct_size)
        .def_readwrite("platform_task_runner", &FlutterCustomTaskRunners::platform_task_runner)
        .def_readwrite("render_task_runner", &FlutterCustomTaskRunners::render_task_runner)
    PYCLASS_END(attacus_py, FlutterCustomTaskRunners, CustomTaskRunners)

    PYCLASS_BEGIN(attacus_py, FlutterOpenGLBackingStore, OpenGLBackingStore)
        .def(py::init<>([](){ return FlutterOpenGLBackingStore(); }))
        .def_readwrite("type", &FlutterOpenGLBackingStore::type)
    PYCLASS_END(attacus_py, FlutterOpenGLBackingStore, OpenGLBackingStore)

    PYCLASS_BEGIN(attacus_py, FlutterSoftwareBackingStore, SoftwareBackingStore)
        .def(py::init<>([](){ return FlutterSoftwareBackingStore(); }))
        .def_readwrite("allocation", &FlutterSoftwareBackingStore::allocation)
        .def_readwrite("row_bytes", &FlutterSoftwareBackingStore::row_bytes)
        .def_readwrite("height", &FlutterSoftwareBackingStore::height)
        .def_readwrite("user_data", &FlutterSoftwareBackingStore::user_data)
        .def_readwrite("destruction_callback", &FlutterSoftwareBackingStore::destruction_callback)
    PYCLASS_END(attacus_py, FlutterSoftwareBackingStore, SoftwareBackingStore)

    PYCLASS_BEGIN(attacus_py, FlutterMetalBackingStore, MetalBackingStore)
        .def(py::init<>([](){ return FlutterMetalBackingStore(); }))
        .def_readwrite("struct_size", &FlutterMetalBackingStore::struct_size)
    PYCLASS_END(attacus_py, FlutterMetalBackingStore, MetalBackingStore)

    py::enum_<FlutterPlatformViewMutationType>(attacus_py, "PlatformViewMutationType", py::arithmetic())
        .value("K_PLATFORM_VIEW_MUTATION_TYPE_OPACITY", kFlutterPlatformViewMutationTypeOpacity)
        .value("K_PLATFORM_VIEW_MUTATION_TYPE_CLIP_RECT", kFlutterPlatformViewMutationTypeClipRect)
        .value("K_PLATFORM_VIEW_MUTATION_TYPE_CLIP_ROUNDED_RECT", kFlutterPlatformViewMutationTypeClipRoundedRect)
        .value("K_PLATFORM_VIEW_MUTATION_TYPE_TRANSFORMATION", kFlutterPlatformViewMutationTypeTransformation)
        .export_values();

    py::enum_<FlutterBackingStoreType>(attacus_py, "BackingStoreType", py::arithmetic())
        .value("K_BACKING_STORE_TYPE_OPEN_GL", kFlutterBackingStoreTypeOpenGL)
        .value("K_BACKING_STORE_TYPE_SOFTWARE", kFlutterBackingStoreTypeSoftware)
        .value("K_BACKING_STORE_TYPE_METAL", kFlutterBackingStoreTypeMetal)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterBackingStore, BackingStore)
        .def(py::init<>([](){ return FlutterBackingStore(); }))
        .def_readwrite("struct_size", &FlutterBackingStore::struct_size)
        .def_readwrite("user_data", &FlutterBackingStore::user_data)
        .def_readwrite("type", &FlutterBackingStore::type)
        .def_readwrite("did_update", &FlutterBackingStore::did_update)
    PYCLASS_END(attacus_py, FlutterBackingStore, BackingStore)

    PYCLASS_BEGIN(attacus_py, FlutterBackingStoreConfig, BackingStoreConfig)
        .def(py::init<>([](){ return FlutterBackingStoreConfig(); }))
        .def_readwrite("struct_size", &FlutterBackingStoreConfig::struct_size)
        .def_readwrite("size", &FlutterBackingStoreConfig::size)
    PYCLASS_END(attacus_py, FlutterBackingStoreConfig, BackingStoreConfig)

    py::enum_<FlutterLayerContentType>(attacus_py, "LayerContentType", py::arithmetic())
        .value("K_LAYER_CONTENT_TYPE_BACKING_STORE", kFlutterLayerContentTypeBackingStore)
        .value("K_LAYER_CONTENT_TYPE_PLATFORM_VIEW", kFlutterLayerContentTypePlatformView)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterLayer, Layer)
        .def(py::init<>([](){ return FlutterLayer(); }))
        .def_readwrite("struct_size", &FlutterLayer::struct_size)
        .def_readwrite("type", &FlutterLayer::type)
        .def_readwrite("offset", &FlutterLayer::offset)
        .def_readwrite("size", &FlutterLayer::size)
    PYCLASS_END(attacus_py, FlutterLayer, Layer)

    PYCLASS_BEGIN(attacus_py, FlutterCompositor, Compositor)
        .def(py::init<>([](){ return FlutterCompositor(); }))
        .def_readwrite("struct_size", &FlutterCompositor::struct_size)
        .def_readwrite("user_data", &FlutterCompositor::user_data)
        .def_readwrite("create_backing_store_callback", &FlutterCompositor::create_backing_store_callback)
        .def_readwrite("collect_backing_store_callback", &FlutterCompositor::collect_backing_store_callback)
        .def_readwrite("present_layers_callback", &FlutterCompositor::present_layers_callback)
        .def_readwrite("avoid_backing_store_cache", &FlutterCompositor::avoid_backing_store_cache)
    PYCLASS_END(attacus_py, FlutterCompositor, Compositor)

    PYCLASS_BEGIN(attacus_py, FlutterLocale, Locale)
        .def(py::init<>([](){ return FlutterLocale(); }))
        .def_readwrite("struct_size", &FlutterLocale::struct_size)
        .def_readwrite("language_code", &FlutterLocale::language_code)
        .def_readwrite("country_code", &FlutterLocale::country_code)
        .def_readwrite("script_code", &FlutterLocale::script_code)
        .def_readwrite("variant_code", &FlutterLocale::variant_code)
    PYCLASS_END(attacus_py, FlutterLocale, Locale)

    PYCLASS_BEGIN(attacus_py, FlutterEngineDisplay, EngineDisplay)
        .def(py::init<>([](){ return FlutterEngineDisplay(); }))
        .def_readwrite("struct_size", &FlutterEngineDisplay::struct_size)
        .def_readwrite("display_id", &FlutterEngineDisplay::display_id)
        .def_readwrite("single_display", &FlutterEngineDisplay::single_display)
        .def_readwrite("refresh_rate", &FlutterEngineDisplay::refresh_rate)
    PYCLASS_END(attacus_py, FlutterEngineDisplay, EngineDisplay)

    py::enum_<FlutterEngineDisplaysUpdateType>(attacus_py, "EngineDisplaysUpdateType", py::arithmetic())
        .value("K_ENGINE_DISPLAYS_UPDATE_TYPE_STARTUP", kFlutterEngineDisplaysUpdateTypeStartup)
        .value("K_ENGINE_DISPLAYS_UPDATE_TYPE_COUNT", kFlutterEngineDisplaysUpdateTypeCount)
        .export_values();

    py::enum_<FlutterEngineDartObjectType>(attacus_py, "EngineDartObjectType", py::arithmetic())
        .value("K_ENGINE_DART_OBJECT_TYPE_NULL", kFlutterEngineDartObjectTypeNull)
        .value("K_ENGINE_DART_OBJECT_TYPE_BOOL", kFlutterEngineDartObjectTypeBool)
        .value("K_ENGINE_DART_OBJECT_TYPE_INT32", kFlutterEngineDartObjectTypeInt32)
        .value("K_ENGINE_DART_OBJECT_TYPE_INT64", kFlutterEngineDartObjectTypeInt64)
        .value("K_ENGINE_DART_OBJECT_TYPE_DOUBLE", kFlutterEngineDartObjectTypeDouble)
        .value("K_ENGINE_DART_OBJECT_TYPE_STRING", kFlutterEngineDartObjectTypeString)
        .value("K_ENGINE_DART_OBJECT_TYPE_BUFFER", kFlutterEngineDartObjectTypeBuffer)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterEngineDartObject, EngineDartObject)
        .def(py::init<>([](){ return FlutterEngineDartObject(); }))
        .def_readwrite("type", &FlutterEngineDartObject::type)
    PYCLASS_END(attacus_py, FlutterEngineDartObject, EngineDartObject)

    py::enum_<FlutterNativeThreadType>(attacus_py, "NativeThreadType", py::arithmetic())
        .value("K_NATIVE_THREAD_TYPE_PLATFORM", kFlutterNativeThreadTypePlatform)
        .value("K_NATIVE_THREAD_TYPE_RENDER", kFlutterNativeThreadTypeRender)
        .value("K_NATIVE_THREAD_TYPE_UI", kFlutterNativeThreadTypeUI)
        .value("K_NATIVE_THREAD_TYPE_WORKER", kFlutterNativeThreadTypeWorker)
        .export_values();

    py::enum_<FlutterEngineAOTDataSourceType>(attacus_py, "EngineAOTDataSourceType", py::arithmetic())
        .value("K_ENGINE_AOT_DATA_SOURCE_TYPE_ELF_PATH", kFlutterEngineAOTDataSourceTypeElfPath)
        .export_values();

    PYCLASS_BEGIN(attacus_py, FlutterEngineAOTDataSource, EngineAOTDataSource)
        .def(py::init<>([](){ return FlutterEngineAOTDataSource(); }))
        .def_readwrite("type", &FlutterEngineAOTDataSource::type)
    PYCLASS_END(attacus_py, FlutterEngineAOTDataSource, EngineAOTDataSource)

    attacus_py.def("flutter_engine_trace_event_duration_begin", &FlutterEngineTraceEventDurationBegin
    , py::arg("name")
    , py::return_value_policy::automatic_reference);
    attacus_py.def("flutter_engine_trace_event_duration_end", &FlutterEngineTraceEventDurationEnd
    , py::arg("name")
    , py::return_value_policy::automatic_reference);
    attacus_py.def("flutter_engine_trace_event_instant", &FlutterEngineTraceEventInstant
    , py::arg("name")
    , py::return_value_policy::automatic_reference);
    attacus_py.def("flutter_engine_get_current_time", &FlutterEngineGetCurrentTime
    , py::return_value_policy::automatic_reference);
    attacus_py.def("flutter_engine_runs_aot_compiled_dart_code", &FlutterEngineRunsAOTCompiledDartCode
    , py::return_value_policy::automatic_reference);
    PYCLASS_BEGIN(attacus_py, FlutterEngineProcTable, EngineProcTable)
        .def(py::init<>([](){ return FlutterEngineProcTable(); }))
        .def_readwrite("struct_size", &FlutterEngineProcTable::struct_size)
        .def_readwrite("create_aot_data", &FlutterEngineProcTable::CreateAOTData)
        .def_readwrite("collect_aot_data", &FlutterEngineProcTable::CollectAOTData)
        .def_readwrite("run", &FlutterEngineProcTable::Run)
        .def_readwrite("shutdown", &FlutterEngineProcTable::Shutdown)
        .def_readwrite("initialize", &FlutterEngineProcTable::Initialize)
        .def_readwrite("deinitialize", &FlutterEngineProcTable::Deinitialize)
        .def_readwrite("run_initialized", &FlutterEngineProcTable::RunInitialized)
        .def_readwrite("send_window_metrics_event", &FlutterEngineProcTable::SendWindowMetricsEvent)
        .def_readwrite("send_pointer_event", &FlutterEngineProcTable::SendPointerEvent)
        .def_readwrite("send_key_event", &FlutterEngineProcTable::SendKeyEvent)
        .def_readwrite("send_platform_message", &FlutterEngineProcTable::SendPlatformMessage)
        .def_readwrite("platform_message_create_response_handle", &FlutterEngineProcTable::PlatformMessageCreateResponseHandle)
        .def_readwrite("platform_message_release_response_handle", &FlutterEngineProcTable::PlatformMessageReleaseResponseHandle)
        .def_readwrite("send_platform_message_response", &FlutterEngineProcTable::SendPlatformMessageResponse)
        .def_readwrite("register_external_texture", &FlutterEngineProcTable::RegisterExternalTexture)
        .def_readwrite("unregister_external_texture", &FlutterEngineProcTable::UnregisterExternalTexture)
        .def_readwrite("mark_external_texture_frame_available", &FlutterEngineProcTable::MarkExternalTextureFrameAvailable)
        .def_readwrite("update_semantics_enabled", &FlutterEngineProcTable::UpdateSemanticsEnabled)
        .def_readwrite("update_accessibility_features", &FlutterEngineProcTable::UpdateAccessibilityFeatures)
        .def_readwrite("dispatch_semantics_action", &FlutterEngineProcTable::DispatchSemanticsAction)
        .def_readwrite("on_vsync", &FlutterEngineProcTable::OnVsync)
        .def_readwrite("reload_system_fonts", &FlutterEngineProcTable::ReloadSystemFonts)
        .def_readwrite("trace_event_duration_begin", &FlutterEngineProcTable::TraceEventDurationBegin)
        .def_readwrite("trace_event_duration_end", &FlutterEngineProcTable::TraceEventDurationEnd)
        .def_readwrite("trace_event_instant", &FlutterEngineProcTable::TraceEventInstant)
        .def_readwrite("post_render_thread_task", &FlutterEngineProcTable::PostRenderThreadTask)
        .def_readwrite("get_current_time", &FlutterEngineProcTable::GetCurrentTime)
        .def_readwrite("run_task", &FlutterEngineProcTable::RunTask)
        .def_readwrite("update_locales", &FlutterEngineProcTable::UpdateLocales)
        .def_readwrite("runs_aot_compiled_dart_code", &FlutterEngineProcTable::RunsAOTCompiledDartCode)
        .def_readwrite("post_dart_object", &FlutterEngineProcTable::PostDartObject)
        .def_readwrite("notify_low_memory_warning", &FlutterEngineProcTable::NotifyLowMemoryWarning)
        .def_readwrite("post_callback_on_all_native_threads", &FlutterEngineProcTable::PostCallbackOnAllNativeThreads)
        .def_readwrite("notify_display_update", &FlutterEngineProcTable::NotifyDisplayUpdate)
    PYCLASS_END(attacus_py, FlutterEngineProcTable, EngineProcTable)

    attacus_py.def("flutter_engine_get_proc_addresses", &FlutterEngineGetProcAddresses
    , py::arg("table")
    , py::return_value_policy::automatic_reference);

}