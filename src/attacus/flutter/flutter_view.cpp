#include <cassert>
#include <chrono>
#include <iostream>

#include <filesystem>
namespace fs = std::filesystem;

#include <SDL.h>

#include <attacus/app.h>

#include "flutter_view.h"
#include "flutter_embedder.h"
#include "flutter_messenger.h"
#include "flutter_runner.h"

#include "components/isolate.h"
#include "components/platform.h"
#include "components/navigation.h"
#include "components/cursor.h"
#include "components/mouse_input.h"
#include "components/text_input.h"

#include "components/texture_registrar.h"

#define FLUTTER_ENGINE_VERSION 1

namespace attacus
{

FlutterView::FlutterView(WindowParams params) : View(params)
{
    messenger_ = new FlutterMessenger(*this);
    runner_ = new FlutterRunner(*this);

    isolate_ = new IsolateComponent(*this);
    platform_ = new PlatformComponent(*this);
    navigation_ = new NavigationComponent(*this);
    cursor_ = new CursorComponent(*this);
    mouseInput_ = new MouseInput(*this);
    textInput_ = new TextInput(*this);

    textureRegistrar_ = new TextureRegistrar(*this);
}

FlutterView::~FlutterView()
{
}

void FlutterView::Create()
{
    View::Create();

    FlutterRendererConfig config = {};
    config.type = kOpenGL;
    config.open_gl.struct_size = sizeof(config.open_gl);
    config.open_gl.make_current = [](void *userdata) -> bool
    {
        auto self = *static_cast<FlutterView*>(userdata);
        auto window = self.sdl_window_;
        auto context = SDL_GetWindowData(window, "GL");
        SDL_GL_MakeCurrent(window, SDL_GetWindowData(window, "GL"));
        return true;
    };
    config.open_gl.make_resource_current = [](void *userdata) -> bool
    {
        auto self = *static_cast<FlutterView*>(userdata);
        auto window = self.sdl_window_;
        auto context = SDL_GetWindowData(window, "GL2");
        SDL_GL_MakeCurrent(window, context);
        return true;
    };
    config.open_gl.clear_current = [](void *userdata) -> bool
    {
        auto self = *static_cast<FlutterView*>(userdata);
        auto window = self.sdl_window_;
        SDL_GL_MakeCurrent(window, nullptr);
        return true;
    };
    config.open_gl.present = [](void *userdata) -> bool
    {
        auto self = *static_cast<FlutterView*>(userdata);
        auto window = self.sdl_window_;
        SDL_GL_SwapWindow(window);
        return true;
    };
    config.open_gl.fbo_callback = [](void *userdata) -> uint32_t
    {
        return 0; // FBO0
    };

    config.open_gl.gl_proc_resolver = [](void *userdata, const char *name) -> void *
    {
        return SDL_GL_GetProcAddress(name);
    };

    config.open_gl.gl_external_texture_frame_callback = 
        [](void *userdata, int64_t texId, size_t width, size_t height, FlutterOpenGLTexture*  texOut) -> bool
    {
        auto self = *static_cast<FlutterView*>(userdata);
        return true;
    };

    // This directory is generated by `flutter build bundle`.
    fs::path project_path = fs::current_path();
    // fs::path project_path(SDL_GetBasePath());
    fs::path assets_path = project_path / "build" / "flutter_assets";
    fs::path icudtl_path = project_path / "build" / "icudtl.dat";

    FlutterProjectArgs args = {};
    args.struct_size = sizeof(FlutterProjectArgs);
    args.assets_path = _strdup(assets_path.string().c_str());
    args.icu_data_path = _strdup(icudtl_path.string().c_str());
    args.platform_message_callback = [](const FlutterPlatformMessage *message, void *user_data)
    {
        FlutterView &self = *static_cast<FlutterView*>(user_data);
        self.messenger().Receive(*message);
    };
    args.custom_task_runners = &runner_->custom_task_runners;

    SDL_GL_MakeCurrent(sdl_window_, nullptr);

    //FlutterEngineResult result = FlutterEngineRun(FLUTTER_ENGINE_VERSION, &config, &args, this, &engine_);
    FlutterEngineResult result = FlutterEngineInitialize(FLUTTER_ENGINE_VERSION, &config, &args, this, &engine_);
    if (result != kSuccess || engine_ == nullptr)
    {
        std::cout << "Could not initialize the Flutter Engine." << std::endl;
        return;
    }

    messenger().Create();
    runner().Create();

    isolate().Create();
    platform().Create();
    navigation().Create();
    cursor().Create();
    mouseInput().Create();
    textInput().Create();

    textureRegistrar().Create();

    result = FlutterEngineRunInitialized(engine_);
    if (result != kSuccess || engine_ == nullptr)
    {
        std::cout << "Could not run the Flutter Engine." << std::endl;
        return;
    }
}

void FlutterView::Render()
{
}

void FlutterView::OnResize(SDL_Event &event)
{
    View::OnResize(event);
    UpdateSize(event.window.data1, event.window.data2, 1.0, false);
}

void FlutterView::OnSize()
{
    View::OnSize();
    UpdateSize(width(), height(), 1.0, false);
}

void FlutterView::OnShow()
{
    FlutterWindowMetricsEvent event = {};
    event.struct_size = sizeof(event);
    event.width = width();
    event.height = height();
    event.pixel_ratio = 1.0;
    FlutterEngineSendWindowMetricsEvent(engine_, &event);
}

void FlutterView::UpdateSize(size_t width, size_t height, float pixelRatio, bool maximized)
{
    //  Round up the physical window size to a multiple of the pixel ratio
    width = std::ceil(width / pixelRatio) * pixelRatio;
    height = std::ceil(height / pixelRatio) * pixelRatio;

    FlutterWindowMetricsEvent event = {0};
    event.struct_size = sizeof(event);
    event.width = width * scaleFactor_;
    event.height = height * scaleFactor_;
    event.pixel_ratio = pixelRatio * scaleFactor_;

    FlutterEngineSendWindowMetricsEvent(engine_, &event);
}

bool FlutterView::Dispatch(SDL_Event &e)
{
    /*
    switch (e.type)
    {
    }
    */

    mouseInput_->Dispatch(e);
    textInput_->Dispatch(e);

    return View::Dispatch(e);
}

} // namespace attacus